

# commit:
``` git commit -m "message" ```

# branching:
``` git branch newBranch ```

# checkout:
``` git checkout branch```

# branch and checkout:
``` git checkout -b newBranchToCheckOut ```

# merge:
``` git merge otherBranch ```

# rebase: to copy a branch to another branch
``` git rebase otherBranch ```

# detach head: (note that head and branch point at one place, but not connected)
``` # HEAD -> main -> commitName ```
``` git checkout commitName # also branchName ``` 
``` HEAD -> commitName ```
``` main -> commitName ```

# relative references:
### 1:
``` # use git log to find the hash of a commit, then: ```
``` git checkout main^^ # grandparent of main ```
``` git checkout HEAD^ # parent of HEAD ```
### 2:
``` git checkout HEAD~2 # grandparent of HEAD ```

# move branch to another commit: (like git checkout for HEAD)
``` git branch -f main HEAD~3 # HEAD remains where it is```


# reset: moves branch and HEAD together
``` git reset HEAD~1 ```

# revert:
``` git revert HEAD ```

# cherry-pick: to copy a commit to current branch
git cherry-pick C1 C2 C3

# rebase -i:
# before: C1, C2, C3, C4, C5, C6, C7 (HEAD)
git rebase -i HEAD~4
# change the order of the last 4 commits (or deselct them):
# on edit: xC5x, C7, C6, C4 (HEAD)
# and then:
# after: C1, C2, C3, C4, C5, C6, C7 (HEAD)
#                    C7, C6, C4 (HEAD)





echo to remove files from a commit:
echo \> git rm --cached /path/to/file, dir OR regular-expression

echo
echo

echo to remove files from staging area \(File becomes untrackted. Data won\'t change after the last edit\):
echo \> git reset HEAD -- file, folder

echo
echo

echo create a new branch and switch to it \(1\):
echo \> git checkout -b new
echo create a new branch and switch to it \(2\):
echo \> git branch new
echo \> git checkout new
